-- Initial schema for Hybrid Bot Engine
-- Run this in Supabase SQL Editor

-- Enable RLS
alter table if exists users enable row level security;
alter table if exists messages enable row level security;
alter table if exists stores enable row level security;

-- users table
create table if not exists users (
  id text primary key,
  telegram_id text,
  web_id text,
  email text,
  name text,
  last_seen timestamp default now(),
  created_at timestamp default now(),
  updated_at timestamp default now()
);

-- messages table
create table if not exists messages (
  id bigint generated by default as identity primary key,
  user_id text references users(id) on delete cascade,
  role text check (role in ('user','bot')),
  text text not null,
  timestamp timestamp default now(),
  created_at timestamp default now()
);

-- stores table
create table if not exists stores (
  id bigint generated by default as identity primary key,
  owner_id text references users(id) on delete cascade,
  name text not null,
  description text,
  status text default 'active',
  created_at timestamp default now(),
  updated_at timestamp default now()
);

-- Indexes for performance
create index if not exists idx_users_telegram_id on users(telegram_id);
create index if not exists idx_users_web_id on users(web_id);
create index if not exists idx_messages_user_id on messages(user_id);
create index if not exists idx_messages_timestamp on messages(timestamp);
create index if not exists idx_stores_owner_id on stores(owner_id);

-- RLS Policies
-- Users can only see their own data
create policy "Users can view own data" on users
  for select using (auth.uid()::text = id);

create policy "Users can insert own data" on users
  for insert with check (auth.uid()::text = id);

create policy "Users can update own data" on users
  for update using (auth.uid()::text = id);

-- Messages policies
create policy "Users can view own messages" on messages
  for select using (auth.uid()::text = user_id);

create policy "Users can insert own messages" on messages
  for insert with check (auth.uid()::text = user_id);

-- Stores policies
create policy "Users can view own stores" on stores
  for select using (auth.uid()::text = owner_id);

create policy "Users can insert own stores" on stores
  for insert with check (auth.uid()::text = owner_id);

create policy "Users can update own stores" on stores
  for update using (auth.uid()::text = owner_id);

-- Functions for updated_at triggers
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Triggers for updated_at
create trigger update_users_updated_at
  before update on users
  for each row
  execute function update_updated_at_column();

create trigger update_stores_updated_at
  before update on stores
  for each row
  execute function update_updated_at_column(); 